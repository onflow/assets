name: Validate Registry Changes

on:
  pull_request_target:
    paths:
      - 'tokens/registry/**'

jobs:
  validate:
    strategy:
      matrix:
        network: [testnet, mainnet]

    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write

    env:
      NETWORK: ${{ matrix.network }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          cd tokens
          bun install

      - name: Get changed folders
        id: changed-files
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            const changedFiles = files.map(file => file.filename);
            core.setOutput('all', JSON.stringify(changedFiles, null, 0));

      - name: Security checks
        env:
          CHANGED_FILES_JSON: ${{ steps.changed-files.outputs.all }}
        run: |
          # Check if PR is from a fork
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "PR is from a fork: ${{ github.event.pull_request.head.repo.full_name }}"
          fi

          # Check if validate-registry.ts has been modified
          HAS_MODIFIED_SCRIPT=$(bun -e "
            try {
              const changedFiles = JSON.parse(process.env.CHANGED_FILES_JSON);
              const hasModified = changedFiles.some(file => file === 'tokens/src/validate-registry.ts');
              console.log(hasModified);
            } catch (e) {
              console.error('Error parsing JSON:', e);
              process.exit(1);
            }
          ")

          if [ "$HAS_MODIFIED_SCRIPT" = "true" ]; then
            echo "Error: The validation script (tokens/src/validate-registry.ts) has been modified."
            echo "This is not allowed for security reasons."
            exit 1
          fi

          # Check if all changed files are in the registry directory
          INVALID_FILES=$(bun -e "
            try {
              const changedFiles = JSON.parse(process.env.CHANGED_FILES_JSON);
              const invalidFiles = changedFiles.filter(file => !file.startsWith('tokens/registry/'));
              console.log(invalidFiles.join('\\n'));
            } catch (e) {
              console.error('Error parsing JSON:', e);
              process.exit(1);
            }
          ")

          if [ -n "$INVALID_FILES" ]; then
            echo "Error: Found changes outside the registry directory:"
            echo "$INVALID_FILES"
            echo "Only changes in tokens/registry/ are allowed."
            exit 1
          fi

      - name: Filter and validate changes
        id: validate
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all }}

        run: |
          # Extract and filter changed folders from the registry directory
          CHANGED_FOLDERS=$(bun -e "
            const changedFiles = JSON.parse(process.env.CHANGED_FILES);
            const registryFiles = changedFiles.filter(file => file.startsWith('tokens/registry/'));
            const folders = new Set(registryFiles.map(file => file.split('/')[2]));
            const filteredFolders = Array.from(folders).filter(folder => 
              process.env.NETWORK === 'testnet' ? 
                folder.startsWith('testnet:') : 
                !folder.startsWith('testnet:')
            );
            console.log(filteredFolders.join(' '));
          ")

          if [ -z "$CHANGED_FOLDERS" ]; then
            echo "No ${{ matrix.network }} changes to validate"
            echo "skip_comment=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Run validation script and capture output
          VALIDATION_OUTPUT=$(bun run tokens/src/validate-registry.ts $CHANGED_FOLDERS)
          VALIDATION_EXIT_CODE=$?

          # Set the output for GitHub Actions
          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "$VALIDATION_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Exit with the validation script's exit code
          exit $VALIDATION_EXIT_CODE

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        with:
          name: validated-folders-${{ matrix.network }}
          path: validated-folders.json
          if-no-files-found: ignore

      - name: Run token status check
        run: |
          bun run tokens/src/1-check-dirs-and-update-tokens-status.ts

      - name: Upload shortlisted contracts
        uses: actions/upload-artifact@v4
        with:
          name: shortlisted-contracts-${{ matrix.network }}
          path: tokens/outputs/${{ matrix.network }}/shortlisted-contracts.json
          if-no-files-found: error

      - name: Create or update comment
        if: steps.validate.outputs.skip_comment != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('${{ github.workspace }}/.github/scripts/upsert-comment.js');
            await script({
              github,
              context,
              core,
              comment: '${{ steps.validate.outputs.comment }}',
              commentIdentifier: '## Registry Changes Validation Report (${{ matrix.network == 'mainnet' && 'Mainnet' || 'Testnet' }})'
            });
